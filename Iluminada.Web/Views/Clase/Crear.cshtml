@model Iluminada.Web.Models.ClaseViewModel
@using Iluminada.Web.Code
@{
    ViewBag.Title = "Crear";
}

<div class="container">

<div class="row">
@using (Html.BeginForm("Crear", "Clase", FormMethod.Post, new {@class = "form-horizontal", enctype = "multipart/form-data" })) 
{
    @Html.HiddenFor(x=>x.Clase.ClaseId)
    @Html.HiddenFor(x=>x.Clase.EsActivo)
    <h3>Datos Generales</h3>
    <div class="form-group form-group-sm">
        <label for="usuario" class="col-xs-1 control-label">Colegio *</label>
        <div class="col-xs-11">
            @Html.DropDownListFor(model => model.Clase.ColegioId, Model.Colegios.Select(x => new SelectListItem { Text = x.Valor, Value = x.Codigo.ToString() }), "--Seleccionar--", new {@class = "form-control" })
            @Html.ValidationMessageFor(model => model.Clase.Profesor, "", new { @class = "help-block" })
        </div>
    </div>
    <div class="form-group form-group-sm">
        <label for="area" class="col-xs-1 control-label">Profesor *</label>
        <div class="col-xs-11">
            @Html.TextBoxFor(model => model.Clase.Profesor, new {@class = "form-control"})
            @Html.ValidationMessageFor(model => model.Clase.Profesor, "", new { @class = "help-block" })
        </div>
    </div>
    <div class="form-group form-group-sm">
        <label for="area" class="col-xs-1 control-label">Nombre *</label>
        <div class="col-xs-11">
            @Html.TextBoxFor(model => model.Clase.Nombre, new { @class = "form-control" })
            @Html.ValidationMessageFor(model => model.Clase.Nombre, "", new { @class = "help-block" })
        </div>
    </div>
    <div class="form-group form-group-sm">
        <label for="exampleInputPassword1" class="col-xs-1 control-label">Area *</label>
        <div class="col-xs-3">
            @Html.DropDownListFor(model => model.Clase.AreaId, Model.Areas.Select(x => new SelectListItem { Text = x.Valor, Value = x.Codigo.ToString() }), "--Seleccionar--", new {@class = "form-control" })
            @Html.ValidationMessageFor(model => model.Clase.AreaId, "", new { @class = "help-block" })
        </div>
        <label for="exampleInputPassword1" class="col-xs-1 control-label">Nivel *</label>
        <div class="col-xs-3">
            @Html.DropDownListFor(model => model.Clase.NivelId, Model.Niveles.Select(x => new SelectListItem { Text = x.Valor, Value = x.Codigo.ToString() }), "--Seleccionar--", new {@class = "form-control" })
            @Html.ValidationMessageFor(model => model.Clase.NivelId, "", new { @class = "help-block" })
        </div>
        <label for="exampleInputPassword1" class="col-xs-1 control-label">Grado *</label>
        <div class="col-xs-3">
            @Html.DropDownListFor(model => model.Clase.GradoId, Model.Grados.Select(x => new SelectListItem { Text = x.Valor, Value = x.Codigo.ToString() }), "--Seleccionar--", new {@class = "form-control" })
            @Html.ValidationMessageFor(model => model.Clase.GradoId, "", new { @class = "help-block" })
        </div>
    </div>
    <hr />
    <h3>Diseño Sistémico de Luz y Verdad LyV</h3>
    <div class="form-group form-group-sm">
        <label for="exampleInputPassword1" class="col-xs-1 control-label">Competencia LyV</label>
        <div class="col-xs-3">
            @Html.DropDownListFor(model => model.Clase.CompetenciaLvId, Model.Competencias.Select(x => new SelectListItem { Text = x.Valor, Value = x.Codigo.ToString() }), "--Seleccionar--", new {@class = "form-control" })
        </div>
        <label for="exampleInputPassword1" class="col-xs-1 control-label">Capacidad LyV</label>
        <div class="col-xs-3">
            @Html.DropDownListFor(model => model.Clase.CapacidadLvId, Model.Capacidades.Select(x => new SelectListItem { Text = x.Valor, Value = x.Codigo.ToString() }), "--Seleccionar--", new {@class = "form-control" })
        </div>
        <label for="exampleInputPassword1" class="col-xs-1 control-label">Metodologia LyV</label>
        <div class="col-xs-3">
            @Html.DropDownListFor(model => model.Clase.MetodologiaLvId, Model.Metodologias.Select(x => new SelectListItem { Text = x.Valor, Value = x.Codigo.ToString() }), "--Seleccionar--", new {@class = "form-control" })
        </div>
    </div>
    <div class="form-group form-group-sm">
        <label for="exampleInputPassword1" class="col-xs-1 control-label">Título</label>
        <div class="col-xs-3">
            @Html.DropDownListFor(model => model.Clase.TituloId, Model.Titulos.Select(x => new SelectListItem { Text = x.Valor, Value = x.Codigo.ToString() }), "--Seleccionar--", new {@class = "form-control" })
        </div>
        <label for="exampleInputPassword1" class="col-xs-1 control-label">Tema</label>
        <div class="col-xs-3">
            @Html.DropDownListFor(model => model.Clase.TemaId, Model.Temas.Select(x => new SelectListItem { Text = x.Valor, Value = x.Codigo.ToString() }), "--Seleccionar--", new {@class = "form-control" })
        </div>
        <label for="exampleInputPassword1" class="col-xs-1 control-label">Contenido</label>
        <div class="col-xs-3">
            @Html.TextBoxFor(model => model.Clase.Contenido, new {@class = "form-control"})
        </div>
    </div>
    <hr />
    <h3>Diseño Académico</h3>
    <div class="form-group form-group-sm">
        <label for="exampleInputPassword1" class="col-xs-1 control-label">Competencias</label>
        <div class="col-xs-3">
            @Html.TextAreaFor(model => model.Clase.Competencia, 3, 30, new {@class = "form-control"})
        </div>
        <label for="exampleInputPassword1" class="col-xs-1 control-label">Capacidades</label>
        <div class="col-xs-3">
            @Html.TextAreaFor(model => model.Clase.Capacidad, 3, 30, new {@class = "form-control"})
        </div>
        <label for="exampleInputPassword1" class="col-xs-1 control-label">Temas y Contenidos</label>
        <div class="col-xs-3">
            @Html.TextAreaFor(model => model.Clase.TemaContenido, 3, 30, new {@class = "form-control"})
        </div>
    </div>
    <hr />
    <h3>Virtudes y Actitud</h3>
    <div class="form-group form-group-sm">
        <label for="exampleInputPassword1" class="col-xs-1 control-label">Virtud General</label>
        <div class="col-xs-3">
            @Html.DropDownListFor(model => model.Clase.VirtudGeneralId, Model.VirtudesGeneral.Select(x => new SelectListItem { Text = x.Valor, Value = x.Codigo.ToString() }), "--Seleccionar--", new {@class = "form-control" })
        </div>
        <label for="exampleInputPassword1" class="col-xs-1 control-label">Virtud Especifica</label>
        <div class="col-xs-3">
            @Html.DropDownListFor(model => model.Clase.VirtudEspecificaId, Model.VirtudesEspecifica.Select(x => new SelectListItem { Text = x.Valor, Value = x.Codigo.ToString() }), "--Seleccionar--", new {@class = "form-control" })
        </div>
    </div>
    <div class="form-group form-group-sm">
        <label for="nombreClase" class="col-xs-1 control-label">Indicador</label>
        <div class="col-xs-11">
            @Html.TextAreaFor(model => model.Clase.Indicador, 5, 120, new {@class = "form-control"})
        </div>
    </div>
    <div class="">
        @if (!String.IsNullOrEmpty(Model.Clase.Archivo))
        {
            <a href="~/Archivos/@Model.Clase.Archivo" target="_blank">@Model.Clase.Archivo</a>
            @Html.HiddenFor(model => model.Clase.Archivo)
        }
        <input id="file" type="file" name="file" style="display:inline-block" />
        <button id="btnEliminarArchivo" type="button" class="btn btn-default" style="display:inline-block">
            <span class="glyphicon glyphicon-remove" aria-hidden="true"></span>
        </button>
    </div>
    <div class="form-group">
        <div style="float:right;margin-right:20px">
            <button type="submit" class="btn btn-lg btn-tales-one" >
                <span class="glyphicon glyphicon-hdd"></span> Guardar
            </button>
        </div>
    </div>
}
</div>

</div>

@section Scripts{

<script type="text/javascript">
    $(function () {
        $("#btnEliminarArchivo").click(function () {
            $("#file").val("");
        });

        $("#Clase_NivelId").change(function () {
            $('#Clase_GradoId').empty();
            $('#Clase_GradoId')
                .append($("<option></option>")
                           .attr("value", '')
                           .text('--Seleccionar--'));

            var nivelId = $(this).val();
            $.get('/Clase/Grado?nivelId=' + nivelId, function (items) {
                $.each(items, function (key, value) {
                    $('#Clase_GradoId')
                        .append($("<option></option>")
                                   .attr("value", value.Codigo)
                                   .text(value.Valor));
                });
            });
        });

        $("#Clase_CompetenciaLvId").change(function () {
            $('#Clase_CapacidadLvId').empty();
            $('#Clase_CapacidadLvId')
                .append($("<option></option>")
                           .attr("value", '')
                           .text('--Seleccionar--'));

            var competenciaLvId = $(this).val();
            $.get('/Clase/CapacidadLv?competenciaLvId=' + competenciaLvId, function (items) {
                $.each(items, function (key, value) {
                    $('#Clase_CapacidadLvId')
                        .append($("<option></option>")
                                   .attr("value", value.Codigo)
                                   .text(value.Valor));
                });
            });
        });

        $("#Clase_TituloId").change(function () {
            $('#Clase_TemaId').empty();
            $('#Clase_TemaId')
                .append($("<option></option>")
                           .attr("value", '')
                           .text('--Seleccionar--'));

            var tituloLvId = $(this).val();
            $.get('/Clase/TemaLv?tituloLvId=' + tituloLvId, function (items) {
                $.each(items, function (key, value) {
                    $('#Clase_TemaId')
                        .append($("<option></option>")
                                   .attr("value", value.Codigo)
                                   .text(value.Valor));
                });
            });
        });

        $("#Clase_VirtudGeneralId").change(function () {
            $('#Clase_VirtudEspecificaId').empty();
            $('#Clase_VirtudEspecificaId')
                .append($("<option></option>")
                           .attr("value", '')
                           .text('--Seleccionar--'));

            var virtudGeneralId = $(this).val();
            $.get('/Clase/VirtudEspecifica?virtudGeneralId=' + virtudGeneralId, function (items) {
                $.each(items, function (key, value) {
                    $('#Clase_VirtudEspecificaId')
                        .append($("<option></option>")
                                   .attr("value", value.Codigo)
                                   .text(value.Valor));
                });
            });
        });

        var substringMatcher = function (strs) {
            return function findMatches(q, cb) {
                var matches, substringRegex;

                // an array that will be populated with substring matches
                matches = [];

                // regex used to determine if a string contains the substring `q`
                substrRegex = new RegExp(q, 'i');

                // iterate through the pool of strings and for any string that
                // contains the substring `q`, add it to the `matches` array
                $.each(strs, function (i, str) {
                    if (substrRegex.test(str)) {
                        matches.push(str);
                    }
                });

                cb(matches);
            };
        };

        var profesores = @Html.ToJson(Model.Profesores);

        $('#Clase_Profesor').typeahead(null,
        {
            name: 'states',
            limit: 10,
            source: substringMatcher(profesores)
        });

    });
</script>

}
